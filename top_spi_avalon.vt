// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/12/2018 16:43:05"
                                                                                
// Verilog Test Bench template for design : top_spi_avalon
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 ps/ 10 ps
module top_spi_avalon_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg av_chip_select;
reg av_read_n;
reg av_write_n;
//reg clk_50MHz;
reg clk_120MHz;
reg miso;
reg reset_n;
reg [31:0]  av_write_data;
// wires                                               
wire [31:0]  av_read_data;
wire av_wait_request;
wire mosi;
wire sclk_25MHz;
wire ss_n;

// assign statements (if any)                          
top_spi_avalon i1 (
// port map - connection between master ports and signals/registers   
	.av_chip_select(av_chip_select),
	.av_read_data(av_read_data),
	.av_read_n(av_read_n),
	.av_wait_request(av_wait_request),
	.av_write_data(av_write_data),
	.av_write_n(av_write_n),
//	.clk_50MHz(clk_50MHz),
	.clk_120MHz(clk_120MHz),
	.miso(miso),
	.mosi(mosi),
	.reset_n(reset_n),
	.sclk_25MHz(sclk_25MHz),
	.ss_n(ss_n)
);
initial                                                
	begin                                                  
		$display("Running testbench");
			clk_120MHz <= 1'b0;
//			clk_50MHz <= 1'b0;
			av_chip_select <= 1'b0;
			av_write_n <= 1'b1;
			av_read_n <= 1'b1;
//			mosi <= 1'b0;
			reset_n <= 1'b1;
		$display("Initial complete");                                         
	end                                                    

//always                                                 
//// optional sensitivity list                           
//// @(event1 or event2 or .... eventn)                  
//begin                                                  
//// code executes for every event on sensitivity list   
//// insert code here --> begin                          
//                                                       
//@eachvec;                                              
//// --> end                                             
//end    
                                                
always	#415                                                 
	begin
		clk_120MHz <= ~clk_120MHz;
	end   
	                                                 
//always	#24                                                 
//	begin
//		clk_50MHz <= ~clk_50MHz;
//	end   
	                                                 
initial
  begin
    
    @(posedge clk_120MHz)
      reset_n <= 1'b0;
    @(posedge clk_120MHz)
      reset_n <= 1'b1;
   @(posedge reset_n) 
		begin
			av_chip_select <= 1'b1;
			av_write_data <= $random;
		end
    @(posedge clk_120MHz)
      av_write_n <= 1'b0;
    @(negedge av_wait_request)
      begin
			@(posedge clk_120MHz)
				begin
					av_write_n <= 1'b1;
				end
		end
	repeat(20)
      @(negedge clk_120MHz);
		
	av_read_n <= 1'b0;
    @(negedge av_wait_request)
      begin
			@(posedge clk_120MHz)
				begin
					av_read_n <= 1'b1;
				end
		end
		
	repeat(130)
      @(negedge clk_120MHz);
	$stop;


  end
  
	always @(negedge sclk_25MHz)
		begin
			miso <= $random;
		end	

		
endmodule

